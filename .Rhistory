}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (dim(data)[1] == 0L)
break
if(iter > 2*contr){
print("error")
break
}
}
return(s.core)
}
4+4
s.core_inout <- function (data_sender_receiver_count, mode)
{
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec)))), -500.0), order =   replicate(length(unique(union(data$send, data$rec))), -500))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
repeat {
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send) <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (dim(data)[1] == 0L)
break
if(iter > 2*contr){
print("error")
break
}
}
return(s.core)
}
s.core_inout <- function (data_sender_receiver_count, mode)
{
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), -500.0), order =   replicate(length(unique(union(data$send, data$rec))), -500))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
repeat {
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send) <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (dim(data)[1] == 0L)
break
if(iter > 2*contr){
print("error")
break
}
}
return(s.core)
}
4+4
s.core_inout <- function (data_sender_receiver_count, mode)
{
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), -500.0), order =   replicate(length(unique(union(data$send, data$rec))), -500))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
repeat {
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send) <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (dim(data)[1] == 0L)
break
if(iter > 2*contr){
print("error")
break
}
}
return(s.core)
}
4+4
s.core_inout <- function (data_sender_receiver_count, mode)
{
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), -500.0), order =   replicate(length(unique(union(data$send, data$rec))), -500))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
repeat {
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (dim(data)[1] == 0L)
break
if(iter > 2*contr){
print("error")
break
}
}
return(s.core)
}
scores<-s.core_inout(data, mode = "all")
data_sender_receiver_count = data
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), -500.0), order =   replicate(length(unique(union(data$send, data$rec))), -500))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
mode = "all"
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), -500.0), order =   replicate(length(unique(union(data$send, data$rec))), -500))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
contr
s.core
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp_rec
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp
str.tmp_rec
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
str.tmp
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
s.thr
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
v.remove
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core
s.core$order[which(s.core$region %in% v.remove)] <- iter
s.core
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), -500.0), order =   replicate(length(unique(union(data$send, data$rec))), -500))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
repeat {
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (dim(data)[1] == 0L)
break
if(iter > 2*contr){
print("error")
break
}
}
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), -500.0), order =   replicate(length(unique(union(data$send, data$rec))), -500))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
repeat {
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (dim(data)[1] == 0L)
break
if(iter > 2*contr){
print("error")
break
}
}
warnings()
s.core
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
s.thr
str.tmp
vector("integer", length=3)
data_trips_gdp_score_ted_edu <- read.csv("C:/Users/user/Desktop/università/dare/TESI/Git_repo/ORCiD_Thesis/Analyses/Dataset nuts2/data_trips_gdp_score_ted_edu.csv", sep=";")
library(readr)
library(igraph)
library(brainGraph)
library(networkR)
library(ggplot2)
library("ggpubr")
network_data <- read_csv("C:/Users/user/Desktop/università/dare/TESI/Git_repo/ORCiD_Thesis/Analyses/Dataset nuts2/network_data.csv")
### cumulative data over years
data <- network_data
data <- aggregate(count ~ sender+receiver, sum, data = data)
data_cov<-data_trips_gdp_score_ted_edu
data_cov$flow_tot<-data_cov$flow_in+data_cov$flow_out
data_cov<-aggregate(.~nuts2,mean,data=data_cov)
data_cov<-data_cov[,-2]
data_gr <- data[-3]
gr <- graph_from_edgelist(el=as.matrix(data_gr), directed=T)
E(gr)$weight<-data$count
s.core_inout <- function (data_sender_receiver_count, mode)
{
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), 0), order =   replicate(length(unique(union(data$send, data$rec))), 0))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
repeat {
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (sum(data$count) == 0L) {
break
}
}
}
return(s.core)
}
scores<-s.core_inout(data, mode = "all")
scores
s.core_inout <- function (data_sender_receiver_count, mode)
{
colnames(data_sender_receiver_count) <- c("send", "rec", "count")
data <- data_sender_receiver_count
s.core <- data.frame(region = unique(union(data$send, data$rec)), s.core = replicate(length(unique(union(data$send, data$rec))), 0), order =   replicate(length(unique(union(data$send, data$rec))), 0))
iter <- 1
contr <- length(unique(union(data$send, data$rec)))
repeat {
if(mode == "in"){
str.tmp <- aggregate(count ~ rec, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="rec")] <- "region"
}
else if(mode == "out"){
str.tmp <- aggregate(count ~ send, FUN = sum, data = data)
colnames(str.tmp)[which(colnames(str.tmp)=="send")] <- "region"
}
else{
str.tmp <- data.frame(region = unique(union(data$send, data$rec)), count = replicate(length(unique(union(data$send, data$rec))), 0))
str.tmp <- str.tmp[order(str.tmp$region),]
str.tmp_rec <- aggregate(count ~ rec, FUN = sum, data = data)
str.tmp_rec <- str.tmp_rec[order(str.tmp_rec$rec),]
str.tmp$count[which(str.tmp$region %in% str.tmp_rec$rec)] <- str.tmp_rec$count
str.tmp_send <- aggregate(count ~ send, FUN = sum, data = data)
str.tmp_send <- str.tmp_send[order(str.tmp_send$send),]
str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] <- str.tmp$count[which(str.tmp$region %in% str.tmp_send$send)] + str.tmp_send$count
}
s.thr <- min(str.tmp$count[which(str.tmp$count > 0)])
v.remove <- str.tmp$region[which(str.tmp$count <= s.thr & str.tmp$count > 0)]
if (length(v.remove) > 0L) {
s.core$s.core[which(s.core$region %in% v.remove)] <- s.thr
s.core$order[which(s.core$region %in% v.remove)] <- iter
data <- data[-which(data$send %in% v.remove),]
data <- data[-which(data$rec %in% v.remove),]
iter <- iter+1
}
if (sum(data$count) == 0L) {
break
}
}
return(s.core)
}
scores<-s.core_inout(data, mode = "all")
scores
cor0<-s_core(g=gr0,W=mat0)
gr <- graph_from_edgelist(el=as.matrix(data_gr), directed=T)
E(gr)$weight<-data$count
mat<-as_adjacency_matrix(gr,attr="weight")
cor<-s_core(g=gr,W=mat)
cor
cor-scores$order
cor
vert<-V(gr)
vert<-names(vert)
vert
all(vert == scores$region)
(vert == scores$region)
vert
scores$region
scoreness <- data.frame(region = vert, score_fun = cor)
pp <- merge(scoreness, scores)
pp
scores<-s.core_inout(data, mode = "in")
pp <- merge(scoreness, scores)
pp
all(pp$s.core == pp$score_fun)
pp <- merge(scoreness, order)
all(pp$s.core == pp$order)
all(pp$s.core == pp$order)
(pp$s.core - pp$order)
all(pp$score_fun == pp$order)
scores
scores[order(scores$s.core),]
setwd("C:/Users/user/Desktop/Repo final paper/VarBRAND")
install.packages("packages/variational/foobar2_1.0.tar.gz",repos = NULL, type = "source")
